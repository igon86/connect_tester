#!/bin/bash

#stop at the first error
#set -e

# check all necessary env variables
if [ ${#DPU_CODE_FOLDER} -eq 0 ] || [ ! -d "$DPU_CODE_FOLDER/noc" ]; then
	1>&2 echo "DPU_CODE_FOLDER does not point to a valid directory - please fix" 
	exit 1
fi

# this is the executable from Michael to query the CONNECT web service
if [ ${#CONNECT_GENERATOR} -eq 0 ] || [ ! -f $CONNECT_GENERATOR ]; then
	1>&2 echo "CONNECT_GENERATOR does not point to a valid file: $CONNECT_GENERATOR - please fix" 
	exit 1
fi

if [ $# -ne 3 ]; then
	# placement file is the link between simulation and synthesis
	echo "Usage: $0 <fallback_noc> <comm_stats_file> <placement_file>"
	exit 1
fi

if ! [ -f $DPU_CODE_FOLDER/noc/topology_generator.py ] || ! [ -f $2 ] || ! [ -f $3 ]; then
	echo "something is missing :("
	exit
fi

for i in `seq 0 20 200`; do

	new_folder="noc${1}_iter${i}"
	echo $new_folder
	mkdir -p $new_folder

	python $DPU_CODE_FOLDER/noc/topology_generator.py --iter $i --noc $1 --placement $3 $2  &> topo.log
	if [ $? -eq 0 ]; then
		cp topology_dump0 ./$new_folder
		cp routing_dump0 ./$new_folder
	else
		echo "failed topology generation"
	fi
	# in any case save the log
	mv topo.log $new_folder

	# invoke CONNECT web service
	$CONNECT_GENERATOR -t custom --custom_topology=topology_dump0 --custom_routing=routing_dump0 --flow_control_type=peek --flit_buffer_depth=4 --router_type=iq --flit_data_width=32 &> connect.log
	if [ $? -eq 0 ]; then
		mv build $new_folder
	fi
	# save the log
	mv connect.log $new_folder
done

rm -f *.dot
